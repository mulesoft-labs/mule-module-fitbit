/**
 * This file was automatically generated by the Mule Development Kit
 */
package com.mulesoft.module.fitbit;

import java.io.IOException;

import org.mule.api.annotations.Configurable;
import org.mule.api.annotations.Connector;
import org.mule.api.annotations.Processor;
import org.mule.api.annotations.oauth.OAuth;
import org.mule.api.annotations.oauth.OAuthAccessToken;
import org.mule.api.annotations.oauth.OAuthAccessTokenSecret;
import org.mule.api.annotations.oauth.OAuthConsumerKey;
import org.mule.api.annotations.oauth.OAuthConsumerSecret;
import org.mule.api.annotations.oauth.OAuthProtected;
import org.mule.api.annotations.param.Default;
import org.mule.api.annotations.param.Optional;
import org.mule.api.annotations.rest.HttpMethod;
import org.mule.api.annotations.rest.RestCall;
import org.mule.api.annotations.rest.RestExceptionOn;
import org.mule.api.annotations.rest.RestHeaderParam;
import org.mule.api.annotations.rest.RestQueryParam;
import org.mule.api.annotations.rest.RestUriParam;

/**
 * Fitbit module
 *
 * @author MuleSoft, Inc.
 */
@Connector(name="fitbit", schemaVersion="3.3")
@OAuth(requestTokenUrl = "https://api.fitbit.com/oauth/request_token",
       accessTokenUrl = "https://api.fitbit.com/oauth/access_token",
       authorizationUrl = "http://www.fitbit.com/oauth/authorize"
           /*
           ,
       authorizationParameters = {
               @OAuthAuthorizationParameter(name = "indivo_record_id", type = String.class, optional = true, description=""),
               @OAuthAuthorizationParameter(name = "indivo_carenet_id", type = String.class, optional = true, description="")
       }*/)
public abstract class FitbitModule
{
    /**
     * URL of the Fitbit server API
     */
    @Configurable
    @RestUriParam("server")
    @Optional
    @Default("api.fitbit.com")
    private String server;
    
    /**
     * RunKeeper server port 
     */
    @Configurable
    @Optional
    @Default("80")
    @RestUriParam("port")
    private int port;

    /**
     * Application key
     */
    @Configurable
    @OAuthConsumerKey
    private String appKey;
    
    /**
     * Application secret
     */
    @Configurable
    @OAuthConsumerSecret
    private String appSecret;

    @OAuthAccessToken 
    private String accessToken;
    
    @OAuthAccessTokenSecret 
    private String accessTokenSecret;

    /**
     * Version of the Fitbit API (currently 1) 
     */
    @Configurable
    @Optional
    @Default("1")
    private int apiVersion;
    
    
    //======== User Profile Data =========================
    
    /**
     * Get User Info
     *
     * {@sample.xml ../../../doc/Fitbit-connector.xml.sample fitbit:get-user-info}
     * 
     * @param apiVersion optional version of the Fitbit API
     * @param userId the ID of the Fitbit user
     * @param responseFormat one of JSON or XML
     * @param unitSystem optional unit system
     * 
     * @throws IOException if not successful
     * 
     * @return user's profile in the format requested using units in the unit system which corresponds to the Accept-Language header provided.
     */
    @Processor
    @OAuthProtected
    @RestCall(uri = "http://{server}:{port}/{api_version}/user/{user_id}/profile.{response_format}", 
              method = HttpMethod.GET, 
              exceptions={@RestExceptionOn(expression="#[message.inboundProperties['http.status'] != 200]")})
    public abstract String getUserInfo(@RestHeaderParam("Accept-Language") @Optional @Default("US") UnitSystem unitSystem,
            @RestUriParam("api_version") @Optional @Default("1") String apiVersion,
            @RestUriParam("user_id") String userId,
            @RestUriParam("response_format") @Optional @Default("JSON") ResponseFormat responseFormat) throws IOException;

    /**
     * Update User Info
     *
     * {@sample.xml ../../../doc/Fitbit-connector.xml.sample fitbit:update-user-info}
     * 
     * @param apiVersion optional version of the Fitbit API
     * @param responseFormat one of JSON or XML
     * @param unitSystem optional unit system
     * @param gender optional Gender; (MALE/FEMALE/NA)
     * @param birthday optional Date of Birth; in the format yyyy-MM-dd
     * @param height optional Height; in the format X.XX, in the unit system that corresponds to the Accept-Language header provided
     * @param nickname optional Nickname
     * @param fullname optional Full Name
     * @param timezone optional Timezone; in the format "America/Los_Angeles"
     * 
     * @throws IOException if not successful
     * 
     * @return Updated user profile in the format requested using units in the unit system which corresponds to the Accept-Language header provided.
     */
    @Processor
    @OAuthProtected
    @RestCall(uri = "http://{server}:{port}/{api_version}/user/-/profile.{response_format}", 
              method = HttpMethod.POST, 
              exceptions={@RestExceptionOn(expression="#[message.inboundProperties['http.status'] != 200]")})
    public abstract String updateUserInfo(@RestHeaderParam("Accept-Language") @Optional @Default("US") UnitSystem unitSystem,
            @RestUriParam("api_version") @Optional @Default("1") String apiVersion,
            @RestUriParam("response_format") @Optional @Default("JSON") ResponseFormat responseFormat,
            @RestQueryParam("gender") @Optional Gender gender,
            @RestQueryParam("birthday") @Optional String birthday,
            @RestQueryParam("height") @Optional String height,
            @RestQueryParam("nickname") @Optional String nickname,
            @RestQueryParam("fullname") @Optional String fullname,
            @RestQueryParam("timezone") @Optional String timezone) throws IOException;
    
    //======== User Collection Resources - Retrieving Collection Data =========================
    
    /**
     * Get a summary of a user's body measurements for a given day in the format requested using units in the unit system which corresponds to the Accept-Language header provided. 
     * This endpoint retrieves only latest entries for the specific date for weight, fat, bmi.
     *
     * {@sample.xml ../../../doc/Fitbit-connector.xml.sample fitbit:get-body-measurements}
     * 
     * @param apiVersion optional version of the Fitbit API
     * @param userId the ID of the Fitbit user or "-" (dash) to indicate user currently authenticated via the token credentials provided.
     * @param responseFormat one of JSON or XML
     * @param date The date in the format yyyy-MM-dd.
     * @param unitSystem one of the US, UK or other
     * 
     * @throws IOException if not successful
     * 
     * @return summary of a user's body measurements for a given day in the format requested
     */
    @Processor
    @OAuthProtected
    @RestCall(uri = "http://{server}:{port}/{api_version}/user/{user_id}/body/date/{date}.{response_format}", 
              method = HttpMethod.GET, 
              exceptions={@RestExceptionOn(expression="#[message.inboundProperties['http.status'] != 200]")})
    public abstract String getBodyMeasurements(@RestHeaderParam("Accept-Language") @Optional @Default("US") UnitSystem unitSystem,
            @RestUriParam("api_version") @Optional @Default("1") String apiVersion,
            @RestUriParam("user_id") String userId,
            @RestUriParam("date") String date,        
            @RestUriParam("response_format") @Optional @Default("JSON") ResponseFormat responseFormat) throws IOException;
    
    /**
     * Get a list of all user's body weight log entries for a given day in the format requested using units 
     * in the unit system which corresponds to the Accept-Language header provided.
     *
     * {@sample.xml ../../../doc/Fitbit-connector.xml.sample fitbit:get-body-weight}
     * 
     * @param apiVersion optional version of the Fitbit API
     * @param responseFormat one of JSON or XML
     * @param date The date in the format yyyy-MM-dd.
     * @param unitSystem one of the US, UK or other
     * 
     * @throws IOException if not successful
     * 
     * @return list of all user's body weight log entries 
     */
    @Processor
    @OAuthProtected
    @RestCall(uri = "http://{server}:{port}/{api_version}/user/-/body/log/weight/date/{date}.{response_format}", 
              method = HttpMethod.GET, 
              exceptions={@RestExceptionOn(expression="#[message.inboundProperties['http.status'] != 200]")})
    public abstract String getBodyWeight(@RestHeaderParam("Accept-Language") @Optional @Default("US") UnitSystem unitSystem,
            @RestUriParam("api_version") @Optional @Default("1") String apiVersion,
            @RestUriParam("date") String date,        
            @RestUriParam("response_format") @Optional @Default("JSON") ResponseFormat responseFormat) throws IOException;
    
    /**
     * Get a list of all user's body weight log entries for a given rage in the format requested using units 
     * in the unit system which corresponds to the Accept-Language header provided.
     *
     * {@sample.xml ../../../doc/Fitbit-connector.xml.sample fitbit:get-body-weight-range}
     * 
     * @param apiVersion optional version of the Fitbit API
     * @param responseFormat one of JSON or XML
     * @param date The date in the format yyyy-MM-dd.
     * @param period The date range period. One of 1d, 7d, 30d, 1w, 1m or the range end date in yyy-MM-dd format when date range is provided. 
     *               Note that period should not be longer than 31 day
     * @param unitSystem one of the US, UK or other
     * 
     * @throws IOException if not successful
     * 
     * @return list of all user's body weight log entries 
     */
    @Processor
    @OAuthProtected
    @RestCall(uri = "http://{server}:{port}/{api_version}/user/-/body/log/weight/date/{date}/{period}.{response_format}", 
              method = HttpMethod.GET, 
              exceptions={@RestExceptionOn(expression="#[message.inboundProperties['http.status'] != 200]")})
    public abstract String getBodyWeightRange(@RestHeaderParam("Accept-Language") @Optional @Default("US") UnitSystem unitSystem,
            @RestUriParam("api_version") @Optional @Default("1") String apiVersion,
            @RestUriParam("date") String date,        
            @RestUriParam("period") String period,        
            @RestUriParam("response_format") @Optional @Default("JSON") ResponseFormat responseFormat) throws IOException;
    
    /**
     * Get a list of all user's body fat log entries for a given day in the format requested using units 
     * in the unit system which corresponds to the Accept-Language header provided.
     *
     * {@sample.xml ../../../doc/Fitbit-connector.xml.sample fitbit:get-body-fat}
     * 
     * @param apiVersion optional version of the Fitbit API
     * @param responseFormat one of JSON or XML
     * @param date The date in the format yyyy-MM-dd.
     * @param unitSystem one of the US, UK or other
     * 
     * @throws IOException if not successful
     * 
     * @return list of all user's body fat log entries 
     */
    @Processor
    @OAuthProtected
    @RestCall(uri = "http://{server}:{port}/{api_version}/user/-/body/log/fat/date/{date}.{response_format}", 
              method = HttpMethod.GET, 
              exceptions={@RestExceptionOn(expression="#[message.inboundProperties['http.status'] != 200]")})
    public abstract String getBodyFat(@RestHeaderParam("Accept-Language") @Optional @Default("US") UnitSystem unitSystem,
            @RestUriParam("api_version") @Optional @Default("1") String apiVersion,
            @RestUriParam("date") String date,        
            @RestUriParam("response_format") @Optional @Default("JSON") ResponseFormat responseFormat) throws IOException;
    
    /**
     * Get a list of all user's body fat log entries for a given rage in the format requested using units 
     * in the unit system which corresponds to the Accept-Language header provided.
     *
     * {@sample.xml ../../../doc/Fitbit-connector.xml.sample fitbit:get-body-fat-range}
     * 
     * @param apiVersion optional version of the Fitbit API
     * @param responseFormat one of JSON or XML
     * @param date The date in the format yyyy-MM-dd.
     * @param period The date range period. One of 1d, 7d, 30d, 1w, 1m or the range end date in yyy-MM-dd format when date range is provided. 
     *               Note that period should not be longer than 31 day
     * @param unitSystem one of the US, UK or other
     * 
     * @throws IOException if not successful
     * 
     * @return list of all user's body fat log entries 
     */
    @Processor
    @OAuthProtected
    @RestCall(uri = "http://{server}:{port}/{api_version}/user/-/body/log/fat/date/{date}/{period}.{response_format}", 
              method = HttpMethod.GET, 
              exceptions={@RestExceptionOn(expression="#[message.inboundProperties['http.status'] != 200]")})
    public abstract String getBodyFatRange(@RestHeaderParam("Accept-Language") @Optional @Default("US") UnitSystem unitSystem,
            @RestUriParam("api_version") @Optional @Default("1") String apiVersion,
            @RestUriParam("date") String date,        
            @RestUriParam("period") String period,        
            @RestUriParam("response_format") @Optional @Default("JSON") ResponseFormat responseFormat) throws IOException;
    
    /**
     * Get a summary and list of a user's activities and activity log entries for a given day in the format requested using units in the unit system which corresponds to the Accept-Language header provided. 
     *
     * {@sample.xml ../../../doc/Fitbit-connector.xml.sample fitbit:get-activities}
     * 
     * @param apiVersion optional version of the Fitbit API
     * @param userId the ID of the Fitbit user or "-" (dash) to indicate user currently authenticated via the token credentials provided.
     * @param responseFormat one of JSON or XML
     * @param date The date in the format yyyy-MM-dd.
     * @param unitSystem one of the US, UK or other
     * 
     * @throws IOException if not successful
     * 
     * @return summary and list of a user's activities
     */
    @Processor
    @OAuthProtected
    @RestCall(uri = "http://{server}:{port}/{api_version}/user/{user_id}/activities/date/{date}.{response_format}", 
              method = HttpMethod.GET, 
              exceptions={@RestExceptionOn(expression="#[message.inboundProperties['http.status'] != 200]")})
    public abstract String getActivities(@RestHeaderParam("Accept-Language") @Optional @Default("US") UnitSystem unitSystem,
            @RestUriParam("api_version") @Optional @Default("1") String apiVersion,
            @RestUriParam("user_id") String userId,
            @RestUriParam("date") String date,        
            @RestUriParam("response_format") @Optional @Default("JSON") ResponseFormat responseFormat) throws IOException;    

    /**
     * Get a summary and list of a user's food log entries for a given day in the format requested.
     *
     * {@sample.xml ../../../doc/Fitbit-connector.xml.sample fitbit:get-foods}
     * 
     * @param apiVersion optional version of the Fitbit API
     * @param userId the ID of the Fitbit user or "-" (dash) to indicate user currently authenticated via the token credentials provided.
     * @param responseFormat one of JSON or XML
     * @param date The date in the format yyyy-MM-dd.
     * 
     * @throws IOException if not successful
     * 
     * @return summary and list of a user's food log entries
     */
    @Processor
    @OAuthProtected
    @RestCall(uri = "http://{server}:{port}/{api_version}/user/{user_id}/foods/log/date/{date}.{response_format}", 
              method = HttpMethod.GET, 
              exceptions={@RestExceptionOn(expression="#[message.inboundProperties['http.status'] != 200]")})
    public abstract String getFoods(@RestUriParam("api_version") @Optional @Default("1") String apiVersion,
            @RestUriParam("user_id") String userId,
            @RestUriParam("date") String date,        
            @RestUriParam("response_format") @Optional @Default("JSON") ResponseFormat responseFormat) throws IOException;   
    
    //============================================================
    
    public int getApiVersion() {
        return apiVersion;
    }

    public void setApiVersion(int apiVersion) {
        this.apiVersion = apiVersion;
    }

    public enum UnitSystem {
        US ("en_US"), 
        UK ("en_GB"), 
        METRIC ("other");
        
        private final String unitSystem;
        
        UnitSystem(String unitSystem) {
            this.unitSystem = unitSystem;
        }

        public String getUnitSystem() {
            return unitSystem;
        }
        
        @Override 
        public String toString() {
            return unitSystem;
        }
    }

    public enum ResponseFormat {
        JSON ("json"), 
        XML ("xml");
        
        private final String responseFormat;
        
        ResponseFormat(String responseFormat) {
            this.responseFormat = responseFormat;
        }

        public String getResponseFormat() {
            return responseFormat;
        }
        
        @Override 
        public String toString() {
            return responseFormat;
        }
    }
    
    public enum Gender {
        MALE ("MALE"), 
        FEMALE ("FEMALE"),
        NA ("NA");
        
        private final String gender;
        
        Gender(String gender) {
            this.gender = gender;
        }

        public String getGender() {
            return gender;
        }
        
        @Override 
        public String toString() {
            return gender;
        }
    }

    public String getServer() {
        return server;
    }

    public void setServer(String server) {
        this.server = server;
    }

    public int getPort() {
        return port;
    }

    public void setPort(int port) {
        this.port = port;
    }

    public String getAppKey() {
        return appKey;
    }

    public void setAppKey(String appKey) {
        this.appKey = appKey;
    }

    public String getAppSecret() {
        return appSecret;
    }

    public void setAppSecret(String appSecret) {
        this.appSecret = appSecret;
    }

    public String getAccessToken() {
        return accessToken;
    }

    public String getAccessTokenSecret() {
        return accessTokenSecret;
    }

    public void setAccessToken(String accessToken) {
        this.accessToken = accessToken;
    }

    public void setAccessTokenSecret(String accessTokenSecret) {
        this.accessTokenSecret = accessTokenSecret;
    }
    
}
